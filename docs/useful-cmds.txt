# kubectl

# From inside a pod, the k8s api server is at https://kubernetes.default.svc

kubectl config set-context --current --namespace=rpanda
kubectl config set-context --current --namespace=default

kubectl get ServiceAccounts --all-namespaces

kubectl describe svc fluvio-sc-public -n fluvio

kubectl -n fluvio port-forward svc/fluvio-sc-public 8003:9003
 > /dev/null 2>&1 &

kubectl logs -l app=fluvio-sc -n fluvio


# Test pod
# create a test pod to manually run and test

kubectl apply -f https://k8s.io/examples/application/shell-demo.yaml
kubectl get pod shell-demo
kubectl exec --stdin --tty shell-demo -- /bin/bash


# RedPanda

# troubleshooting docs for redpanda
# https://docs.redpanda.com/current/manage/kubernetes/troubleshooting/k-troubleshoot/

# Watch helm release logs:
kubectl logs -l app.kubernetes.io/name=operator -c manager --namespace rpanda -f

# operator logs
kubectl logs -l app.kubernetes.io/name=operator -c manager --namespace rpanda -f

# get connection info:
kubectl exec redpanda-0 --namespace rpanda -- cat /etc/redpanda/redpanda.yaml

# test with rpk on redpanda broker
kubectl -n rpanda exec --stdin --tty redpanda-0 -- /bin/bash


# Docker

# about flattening
# https://tuhrig.de/flatten-a-docker-container-or-image/
# https://stackoverflow.com/questions/22713551/how-to-flatten-a-docker-image

apt-get install docker
groupadd docker
gpasswd -a $USER docker
newgrp docker

# Run Docker in Docker
# TODO: fix owner/mode to appropriate for both in/out of container
chmod 777 /var/run/docker.sock
docker run -it -v /var/run/docker.sock:/var/run/docker.sock ubuntu:latest sh -c "apt-get update ; apt-get install docker.io -y ; bash"

docker run --user root -it -v /var/run/docker.sock:/var/run/docker.sock rust-runner /bin/bash
docker run -it -v /var/run/docker.sock:/var/run/^Ccker.sock rust-runner /bin/bash

# To reclaim disk space from docker images and containers:
docker system df
# If the build cache size is too large:
docker builder prune
# or big cleanup:
docker system prune

# Delete all containers and images
# sudo docker rmi -f $(sudo docker images -aq)
# sudo docker rm -vf $(sudo docker ps -aq)


# Test EC2 instance

# setup for running docker as non-root and docker in docker
sudo dnf install -y docker git
sudo systemctl start docker
sudo gpasswd -a ec2-user docker
newgrp docker # or logout/login
# TODO: fix owner/mode to appropriate for both in/out of container
sudo chmod 777 /var/run/docker.sock
